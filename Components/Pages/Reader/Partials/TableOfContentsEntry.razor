@using System.Diagnostics
@using BookHeaven.EpubManager.Entities
@implements IAsyncDisposable
@if (EpubChapter.Title != null)
{
    <span id="@EpubChapter.ItemId" class="flex items-center scroll-mt-40 w-full">
        @if (EpubChapter.Chapters.Count > 0)
        {
            <Button OnClick="@ToggleCollapse">
                @if (_collapsed)
                {
                    <svg  xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="1"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-chevron-right"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M9 6l6 6l-6 6" /></svg>
                }
                else
                {
                    <svg  xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="1"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-chevron-down"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M6 9l6 6l6 -6" /></svg>
                }
            </Button>
        }
        <Button Class="@(_isSelected.Then("font-bold") + " text-left w-full !justify-start")" OnClick="@(() => ReaderService.OnChapterSelected?.Invoke(EpubChapter.ItemId!))">@EpubChapter.Title</Button>
    </span>
}

@if (EpubChapter.Chapters.Count > 0)
{
    if (!_collapsed || EpubChapter.Title == null)
    {
        <ul class="ms-5 list-none">
            @foreach (var chapter in EpubChapter.Chapters)
            {
                <li>
                    <TableOfContentsEntry EpubChapter="chapter" CurrentChapterId="@CurrentChapterId" />
                </li>
            }
        </ul>
    }
}

@code {
    [Inject] IJSRuntime JsRuntime { get; set; } = null!;
    [Inject] ReaderService ReaderService { get; set; } = null!;
    
    [Parameter] public EpubChapter EpubChapter { get; set; } = null!;

    [Parameter] public string? CurrentChapterId { get; set; }

    //[Parameter] public EventCallback<string> OnChapterSelected { get; set; }
    
    private IJSObjectReference? _jsModule;
    private bool _collapsed = true;
    private bool _isSelected = false;
    private bool _shouldScroll;

    private string? _lastSelectedChapterId = null;

    protected override void OnInitialized()
    {
        if (EpubChapter.Chapters.Count > 0) _collapsed = !EpubChapter.ContainsChapter(CurrentChapterId!);
    }
    
    protected override void OnParametersSet()
    {
        if (EpubChapter.ItemId != null) _isSelected = CurrentChapterId == EpubChapter.ItemId;

        if (_isSelected && _lastSelectedChapterId != EpubChapter.ItemId)
        {
            _shouldScroll = true;
            _lastSelectedChapterId = EpubChapter.ItemId;
        }
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _jsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./Components/Pages/Reader/Partials/TableOfContentsEntry.razor.js");
        }
        if (_shouldScroll && _jsModule is not null)
        {
            _shouldScroll = false;
            await _jsModule!.InvokeVoidAsync("ScrollToChapterInIndex", CurrentChapterId);
        }
    }

    

    private void ToggleCollapse()
    {
        _collapsed = !_collapsed;
    }
    
    public async ValueTask DisposeAsync()
    {
        if (_jsModule != null) await _jsModule.DisposeAsync();
    }

}