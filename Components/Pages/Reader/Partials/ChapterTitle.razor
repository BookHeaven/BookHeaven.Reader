@implements IDisposable
<div @ref="_containerRef" class="flex-1 flex items-center justify-center mx-2">
    <span @ref="_textRef" class="text-nowrap">@DisplayText</span>
    <span @ref="_pageRef" class="ms-1 text-nowrap">(@(ReaderService.CurrentPage + 1) / @(ReaderService.TotalPages + 1))</span>
</div>

@code {
    [Inject] private IJSRuntime JsRuntime { get; set; } = null!;
    [Inject] private ReaderService ReaderService { get; set; } = null!;
    
    [Parameter] public string Title { get; set; } = string.Empty;

    private ElementReference _containerRef;
    private ElementReference _textRef;
    private ElementReference _pageRef;
    private IJSObjectReference? _module;
    private string DisplayText { get; set; } = string.Empty;
    
    private string _currentTitle = string.Empty;
    private (double containerWidth, double paginationWith, double availableWith) _currentDimensions;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./Components/Pages/Reader/Partials/ChapterTitle.razor.js");
            ReaderService.OnPageChanged += RefreshUi;
            ReaderService.OnChapterChanged += RefreshUi;
            ReaderService.OnTotalPagesChanged += RefreshUi;
            RefreshUi();
        }
    }
    
    private async void RefreshUi()
    {
        if (_module is null) return;
        try
        {
            var containerWidth = await _module.InvokeAsync<double>("getElementWidth", _containerRef);
            var paginationWidth = await _module.InvokeAsync<double>("getElementWidth", _pageRef);
            var availableWidth = containerWidth - paginationWidth - 4; // 4px spacing fallback for .ms-1
            
            if((containerWidth, paginationWidth, availableWidth) == _currentDimensions && _currentTitle == Title) return;
            _currentTitle = Title;
            _currentDimensions = (containerWidth, paginationWidth, availableWidth);

            var fullTextWidth = await _module.InvokeAsync<double>("measureTextWidth", _textRef, Title);

            if (fullTextWidth <= availableWidth)
            {
                DisplayText = Title;
            }
            else
            {
                var avgCharWidth = fullTextWidth / Title.Length;
                var maxChars = Math.Max(4, (int)(availableWidth / avgCharWidth));
                var half = (maxChars - 1) / 2;
                DisplayText = Title[..half] + "…" + Title[^half..];
            }
        }
        finally
        {
            await InvokeAsync(StateHasChanged);
        }
    }
    
    public void Dispose()
    {
        ReaderService.OnPageChanged -= RefreshUi;
        ReaderService.OnChapterChanged -= RefreshUi;
        ReaderService.OnTotalPagesChanged -= RefreshUi;
        _module?.DisposeAsync();
    }
}