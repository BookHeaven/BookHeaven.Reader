@inject NavigationManager NavigationManager
@implements IDisposable
@if (!OverlayService.IsOverlayVisible)
{
    return;
}
<div class="z-[1000] absolute inset-0 flex flex-col justify-between" @onclick="OverlayService.ToggleOverlay">
    <div class="border-solid border-bottom border-b-2 mb-auto flex w-full items-center gap-3 border-black bg-white" @onclick:stopPropagation="true">
        <Button OnClick="@(() => NavigationManager.NavigateTo("/books"))">
            <svg  xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="1"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-arrow-left"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M5 12l14 0" /><path d="M5 12l6 6" /><path d="M5 12l6 -6" /></svg>
        </Button>
        <span class="ms-auto me-2">@BookTitle</span>
    </div>
    
    <div>
        @if (OverlayService.CurrentOverlayPanel == OverlayService.OverlayPanel.FontSettings)
        {
            <TextSettings/>
        }
        @if (OverlayService.CurrentOverlayPanel == OverlayService.OverlayPanel.PageSettings)
        {
            <PageSettings/>
        }
        @if (OverlayService.CurrentOverlayPanel == OverlayService.OverlayPanel.TemperatureSettings)
        {
            <ColorTemperatureSettings/>
        }
        <div class="border-solid border-t-2 w-full border-black bg-white" @onclick:stopPropagation="true">
            <div class="flex items-center gap-3 px-2">
                <Button OnClick="@ReaderService.PreviousChapter">
                    <svg  xmlns="http://www.w3.org/2000/svg"   viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="1"  stroke-linecap="round"  stroke-linejoin="round"  class="size-7 icon icon-tabler icons-tabler-outline icon-tabler-chevrons-left"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M11 7l-5 5l5 5" /><path d="M17 7l-5 5l5 5" /></svg>
                </Button>
                <ProgressBar Value="@Progress"/>
                <Button OnClick="@ReaderService.NextChapter">
                    <svg  xmlns="http://www.w3.org/2000/svg"   viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="1"  stroke-linecap="round"  stroke-linejoin="round"  class="size-7 icon icon-tabler icons-tabler-outline icon-tabler-chevrons-right"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M7 7l5 5l-5 5" /><path d="M13 7l5 5l-5 5" /></svg>
                </Button>
            </div>
            <div class="flex items-center gap-3 px-2">
                <Button OnClick="@OverlayService.ToggleToc">
                    <svg  xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-list"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M9 6l11 0" /><path d="M9 12l11 0" /><path d="M9 18l11 0" /><path d="M5 6l0 .01" /><path d="M5 12l0 .01" /><path d="M5 18l0 .01" /></svg>
                </Button>
                <span class="flex-1">@ChapterTitle</span>
                <Button OnClick="@(() => OverlayService.TogglePanel(OverlayService.OverlayPanel.TemperatureSettings))">
                    <svg  xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="currentColor"  class="icon icon-tabler icons-tabler-filled icon-tabler-contrast"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M17 3.34a10 10 0 1 1 -15 8.66l.005 -.324a10 10 0 0 1 14.995 -8.336m-9 1.732a8 8 0 0 0 4.001 14.928l-.001 -16a8 8 0 0 0 -4 1.072" /></svg>
                </Button>
                <Button OnClick="@(() => OverlayService.TogglePanel(OverlayService.OverlayPanel.FontSettings))">
                    <svg  xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="1"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-text-size"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M3 7v-2h13v2" /><path d="M10 5v14" /><path d="M12 19h-4" /><path d="M15 13v-1h6v1" /><path d="M18 12v7" /><path d="M17 19h2" /></svg>
                </Button>
                <Button OnClick="@(() => OverlayService.TogglePanel(OverlayService.OverlayPanel.PageSettings))">
                    <svg  xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="1"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-settings"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M10.325 4.317c.426 -1.756 2.924 -1.756 3.35 0a1.724 1.724 0 0 0 2.573 1.066c1.543 -.94 3.31 .826 2.37 2.37a1.724 1.724 0 0 0 1.065 2.572c1.756 .426 1.756 2.924 0 3.35a1.724 1.724 0 0 0 -1.066 2.573c.94 1.543 -.826 3.31 -2.37 2.37a1.724 1.724 0 0 0 -2.572 1.065c-.426 1.756 -2.924 1.756 -3.35 0a1.724 1.724 0 0 0 -2.573 -1.066c-1.543 .94 -3.31 -.826 -2.37 -2.37a1.724 1.724 0 0 0 -1.065 -2.572c-1.756 -.426 -1.756 -2.924 0 -3.35a1.724 1.724 0 0 0 1.066 -2.573c-.94 -1.543 .826 -3.31 2.37 -2.37c1 .608 2.296 .07 2.572 -1.065z" /><path d="M9 12a3 3 0 1 0 6 0a3 3 0 0 0 -6 0" /></svg>
                </Button>
            </div>
        </div>
    </div>
</div>

@code {

    [Inject] private OverlayService OverlayService { get; set; } = null!;
    [Inject] private ReaderService ReaderService { get; set; } = null!;
    [Parameter] public string? BookTitle { get; set; }
    [Parameter] public string? ChapterTitle { get; set; }
    [Parameter] public decimal Progress { get; set; }

    protected override void OnInitialized()
    {
        OverlayService.Initialize();
        OverlayService.OnOverlayChanged += RefreshUi;
    }

    public void Dispose()
    {
        OverlayService.OnOverlayChanged -= RefreshUi;
        GC.SuppressFinalize(this);
    }
    
    private void RefreshUi()
    {
        InvokeAsync(StateHasChanged);
    }

}
