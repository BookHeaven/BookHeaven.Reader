@using System.ComponentModel
@using System.Diagnostics
@using BookHeaven.Reader.Functions
@implements IAsyncDisposable
<div class="absolute w-screen h-screen z-[999] grid grid-cols-3" @onpointerdown="@PointerDown" @onpointerup="@PointerUp">
    @foreach(var button in Buttons)
    {
        <span @onclick="@(() => HandleNavigation(button))"></span>
    }
</div>

@code {
    [Inject] private OverlayService OverlayService { get; set; } = null!;
    [Inject] private ReaderService ReaderService { get; set; } = null!;
    [Inject] private IJSRuntime JsRuntime { get; set; } = null!;
    [Inject] private ImageViewerService ImageViewerService { get; set; } = null!;
    
    private IJSObjectReference _module = null!;
    
    private List<NavigationButton> Buttons => ReaderNavigation.GetLayoutForType((NavigationLayoutType)ReaderService.ProfileSettings.SelectedLayout);

    private bool _cancelNavigation;
    private Stopwatch _stopwatch = new();
    
    protected override void OnInitialized()
    {
        ReaderService.ProfileSettings.PropertyChanged += OnSelectedLayoutChanged;
    }
    
    private void OnSelectedLayoutChanged(object? sender, PropertyChangedEventArgs args)
    {
        if (args.PropertyName != nameof(ProfileSettings.SelectedLayout)) return;
        StateHasChanged();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./Components/Pages/Reader/Partials/Navigation.razor.js");
        }
    }

    private void HandleNavigation(NavigationButton button)
    {
        if (!_cancelNavigation)
        {
            //button == NavigationButton.Next ? ReaderService.NextPage() : ReaderService.PreviousPage();
            switch (button)
            {
                case NavigationButton.Next:
                    ReaderService.NextPage();
                    break;
                case NavigationButton.Previous:
                    ReaderService.PreviousPage();
                    break;
                case NavigationButton.Overlay:
                    OverlayService.ToggleOverlay();
                    break;
            }
        }
        _cancelNavigation = false;
    }

    private void PointerDown()
    {
        _stopwatch.Restart();
    }
    
    private async Task PointerUp(MouseEventArgs e)
    {
        _stopwatch.Stop();
        _cancelNavigation = false;
        if (_stopwatch.ElapsedMilliseconds > 400)
        {
            _cancelNavigation = true;
            var data = await _module.InvokeAsync<string?>("FindZoomableElement", e.ClientX, e.ClientY);
            if (!string.IsNullOrEmpty(data))
            {
                ImageViewerService.OnOpenImage?.Invoke(data);
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        ReaderService.ProfileSettings.PropertyChanged -= OnSelectedLayoutChanged;
        await _module.DisposeAsync();
    }

}