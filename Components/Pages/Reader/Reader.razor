@page "/reader/{id:guid}"
@using System.Globalization
@using BookHeaven.Reader.Components.Pages.Reader.Partials
@layout EmptyLayout

<!--suppress CssUnresolvedCustomProperty -->
<style>
	#viewer {
		--chapter-page: @_readerViewModel.CurrentPage;
		--font-size: @_profileSettings.FontSize;
		--line-height: @_profileSettings.LineHeight.ToString("0.00", CultureInfo.InvariantCulture);
		--letter-spacing: @_profileSettings.LetterSpacing.ToString("0.00", CultureInfo.InvariantCulture);
		--paragraph-spacing: @_profileSettings.ParagraphSpacing.ToString("0.00", CultureInfo.InvariantCulture);
		--text-indent: @_profileSettings.TextIndent.ToString("0.00", CultureInfo.InvariantCulture);
		--word-spacing: @_profileSettings.WordSpacing.ToString("0.00", CultureInfo.InvariantCulture);
		--margin-vertical: @_profileSettings.VerticalMargin.ToString("0.00", CultureInfo.InvariantCulture);
		--margin-horizontal: @_profileSettings.HorizontalMargin.ToString("0.00", CultureInfo.InvariantCulture);
		--page-height: calc((100vh - 24px) - ((var(--margin-vertical) * 1rem)*2));
		--page-width: calc((100vw - 4px) - ((var(--margin-horizontal) * 1rem)*2));
		--column-gap: 4px;
		font-family: 'Bookerly', serif;
		margin: calc(var(--margin-vertical) * 1rem) calc(var(--margin-horizontal) * 1rem);
	}
	body {
		margin: 0 !important;
		overflow: hidden;
	}

	#viewer > .chapter {
		height: var(--page-height);
		column-width: var(--page-width);
		font-size: calc(var(--font-size) * 1px) !important;
		column-fill: auto;
		column-gap: var(--column-gap);
		padding: 0 2px;
	}

	@($"#viewer > .chapter p:not([class]){(!string.IsNullOrEmpty(Current?.ParagraphClassName) ? $",#viewer > .chapter.current .{Current.ParagraphClassName}" : "")}{(!string.IsNullOrEmpty(Previous?.ParagraphClassName) ? $",#viewer > .chapter.prev .{Previous.ParagraphClassName}" : "")}{(!string.IsNullOrEmpty(Next?.ParagraphClassName) ? $",#viewer > .chapter.next .{Next.ParagraphClassName}" : "")}") {
		margin: calc(var(--paragraph-spacing) * 1pt) 0!important;
		/* line-height: calc(1.5 + var(--line-height)) !important; */
		word-break: auto-phrase;
		orphans: 1;
		widows: 2;
	}

	#viewer > .chapter > p > span:first-child {
		line-height: inherit !important;
		height: auto !important;
	}

	#viewer > .chapter.current {
		transform: translateX(calc((var(--page-width) + var(--column-gap)) * var(--chapter-page) * -1));
	}

	#viewer > .chapter img, svg, figure {
		box-sizing: border-box;
		object-fit: contain;
		break-inside: avoid;
		max-width: 100%;
		max-height: var(--page-height);
	}
</style>
@if (_styles.Count > 0 && Current?.Styles.Count > 0)
{
	foreach (var style in _styles.Where(style => Current?.Styles.Any(s => s.Contains(style.Name)) == true))
    {
	    <style>@style.Content</style>
    }
}

@if (_bookLoading)
{
    <Message Content="@(Translations.LOADING_BOOK)"/>
}
@if (_readerViewModel.ShowOverlay)
{
    <Overlay
        @bind-ShowOverlay="@_readerViewModel.ShowOverlay"
        @bind-ShowSpine="@_readerViewModel.ShowToc"
        Progress="@Progress"
        ProfileSettings="@_profileSettings"
        BookTitle="@_book?.Title"
        ChapterTitle="@ChapterTitle"
        SettingsChanged="@OnSettingsChanged"
        GoToChapter="@OnGoToChapter"/>
}

@if (_readerViewModel.ShowToc)
{
    <TableOfContents
        @bind-ShowToc="@_readerViewModel.ShowToc"
        Chapters="@_epubBook?.Content.TableOfContents"
        CurrentChapterId="@Current?.Id"
        OnChapterSelected="@OnChapterSelected"/>
}

<Navigation OnNavigationButtonClicked="@NavigationButtonClicked" ProfileSettings="_profileSettings"/>
<div class="flex h-screen flex-col">

    <div id="viewer" class="flex-1 overflow-hidden">
	    <div class="chapter current">
		    @if (Current?.IsContentProcessed == true)
		    {
			    @((MarkupString)Current.TextContent)
		    }
	    </div>
	    <div class="chapter prev invisible">
		    @if(Previous?.IsContentProcessed == true)
		    {
			    @((MarkupString)Previous.TextContent)
		    }
	    </div>
	    <div class="chapter next invisible">
		    @if(Next?.IsContentProcessed == true)
		    {
			    @((MarkupString)Next.TextContent)
		    }
	    </div>
    </div>

    <div class="relative mt-auto flex h-[24px] gap-2 px-2">
        @if (!_bookLoading)
        {
            <Clock/>
            <BatteryInfo/>
            <ChapterTitle Title="@ChapterTitle" CurrentPage="_readerViewModel.CurrentPage" TotalPages="_readerViewModel.TotalPages"/>
            <div class="ms-auto text-end">
                @(Progress.ToString("0.00"))%
            </div>
        }
    </div>
</div>