@attribute [Route($"{Urls.Reader}/{{id:guid}}")]
@using System.Globalization
@using BookHeaven.Reader.Components.Pages.Reader.Partials
@layout EmptyLayout
<!--suppress CssUnresolvedCustomProperty -->
<style>
	body {
		margin: 0 !important;
		overflow: hidden;
	}
	
	@@scope (#viewer) {
		:scope {
			--chapter-page: @ReaderService.CurrentPage;
			--font-size: @ProfileSettingsService.ProfileSettings.FontSize.ToString("0.00", CultureInfo.InvariantCulture);
			--line-height: @ProfileSettingsService.ProfileSettings.LineHeight.ToString("0.00", CultureInfo.InvariantCulture);
			--letter-spacing: @ProfileSettingsService.ProfileSettings.LetterSpacing.ToString("0.00", CultureInfo.InvariantCulture);
			--paragraph-spacing: @ProfileSettingsService.ProfileSettings.ParagraphSpacing.ToString("0.00", CultureInfo.InvariantCulture);
			--text-indent: @ProfileSettingsService.ProfileSettings.TextIndent.ToString("0.00", CultureInfo.InvariantCulture);
			--word-spacing: @ProfileSettingsService.ProfileSettings.WordSpacing.ToString("0.00", CultureInfo.InvariantCulture);
			--margin-vertical: @ProfileSettingsService.ProfileSettings.VerticalMargin.ToString("0.00", CultureInfo.InvariantCulture);
			--margin-horizontal: @ProfileSettingsService.ProfileSettings.HorizontalMargin.ToString("0.00", CultureInfo.InvariantCulture);
			--page-height: calc((100vh - 24px) - ((var(--margin-vertical) * 1rem)*2));
			--page-width: calc((100vw - 4px) - ((var(--margin-horizontal) * 1rem)*2));
			--column-gap: 4px;
			margin: calc(var(--margin-vertical) * 1rem) calc(var(--margin-horizontal) * 1rem);

			& > .chapter {
				height: var(--page-height);
				column-width: var(--page-width);
				font-size: calc(var(--font-size) * 1px) !important;
				letter-spacing: calc(var(--letter-spacing) * 1px);
				column-fill: auto;
				column-gap: var(--column-gap);
				padding: 0 2px;
				orphans: 1;
				widows: 1;
				

				&.current {
					transform: translateX(calc((var(--page-width) + var(--column-gap)) * var(--chapter-page) * -1));
				}

				& p {
					word-break: auto-phrase !important;
					hyphens: none !important;
				}
			}
		}

		img, svg, figure {
			box-sizing: border-box;
			object-fit: contain !important;
			break-inside: avoid !important;
			max-width: 100%;
			max-height: var(--page-height) !important;
		}

		@($":scope > .chapter p:not([class]){(!string.IsNullOrEmpty(Current?.ParagraphClassName) ? $",:scope > .chapter.current .{Current.ParagraphClassName}" : "")}{(!string.IsNullOrEmpty(Previous?.ParagraphClassName) ? $",:scope > .chapter.prev .{Previous.ParagraphClassName}" : "")}{(!string.IsNullOrEmpty(Next?.ParagraphClassName) ? $",:scope > .chapter.next .{Next.ParagraphClassName}" : "")}") {
			margin-block: calc(var(--paragraph-spacing) * 1pt) !important;
		}

		:scope sup {
			font-size: 0.6em;
			line-height: normal;
			font-weight: bold;
		}

		:scope .drop-cap {
			orphans: 2;
			&::first-letter {
				initial-letter: 2;
				margin-inline-end: 0.3em;
			}

			& + p {
				clear: both;
			}
		}
	}
	@@scope(#viewer .current) {
		@if (_styles.Count > 0)
		{
			foreach (var style in _styles.Where(style => Current?.Stylesheets.Any(s => s.Contains(style.Identifier)) == true))
			{
				@style.Content
			}
		}
	}
	@@scope(#viewer .prev) {
		@if (_styles.Count > 0)
		{
			foreach (var style in _styles.Where(style => Previous?.Stylesheets.Any(s => s.Contains(style.Identifier)) == true))
			{
				@style.Content
			}
		}
	}
	@@scope(#viewer .next) {
		@if (_styles.Count > 0)
		{
			foreach (var style in _styles.Where(style => Next?.Stylesheets.Any(s => s.Contains(style.Identifier)) == true))
			{
				@style.Content
			}
		}
	}
</style>
@if (_book is not null)
{
	<StandbyWallpaper ImageSrc="@_book.CoverUrl()" />
}
<ColorTemperatureOverlay />
<FontManager />
<ImageViewer />
<Navigation />
@if (_bookLoading)
{
	<Message Content="@Translations.LOADING_BOOK"/>
}
<Overlay
	Progress="@Progress"
	BookTitle="@_book?.Title"
	ChapterTitle="@ChapterTitle"
	IsTocEmpty="_ebook?.Content.TableOfContents.Count == 0"/>

<TableOfContents
	Chapters="@_ebook?.Content.TableOfContents"
	CurrentChapterId="@Current?.Identifier"/>


<div class="flex h-screen flex-col">
	<div id="viewer" class="flex-1 overflow-hidden">
		<div class="chapter current">
			@if (Current?.IsContentProcessed == true)
			{
				@((MarkupString)Current.Content)
			}
		</div>
		<div class="chapter prev invisible">
			@if (Previous?.IsContentProcessed == true)
			{
				@((MarkupString)Previous.Content)
			}
		</div>
		<div class="chapter next invisible">
			@if (Next?.IsContentProcessed == true)
			{
				@((MarkupString)Next.Content)
			}
		</div>
	</div>

	<div class="relative mt-auto flex h-[24px] gap-2 mx-2">
		@if (!_bookLoading)
		{
			<Clock/>
			<BatteryInfo/>
			<ChapterTitle Title="@ChapterTitle"/>
			<div class="ms-auto text-end">
				@(Progress.ToString("0.00"))%
			</div>
		}
	</div>
</div>