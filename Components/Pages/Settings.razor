@attribute [Route(Urls.Settings)]
@layout EmptyLayout
@inject NavigationManager NavigationManager

<Header>
    <div>
        <Button OnClick="@(() => NavigationManager.NavigateTo(Urls.Books))">
            <svg  xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="1"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-arrow-left"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M5 12l14 0" /><path d="M5 12l6 6" /><path d="M5 12l6 -6" /></svg>
        </Button>
    </div>
</Header>
<main class="p-4">
    <h1 class="text-2xl font-bold mb-4">General</h1>
    <div class="mb-3 flex flex-col gap-3">
        <label for="server-url" class="form-label">@Translations.SERVER_URL:</label>
        <input type="text" class="border-2 w-full rounded border-neutral-400 p-2.5 focus:ring-black-500" id="server-url" @bind-value="AppStateService.ServerUrl">
        <p class="px-3 text-sm">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="currentColor" class="icon icon-tabler icons-tabler-filled icon-tabler-alert-triangle"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M12 1.67c.955 0 1.845 .467 2.39 1.247l.105 .16l8.114 13.548a2.914 2.914 0 0 1 -2.307 4.363l-.195 .008h-16.225a2.914 2.914 0 0 1 -2.582 -4.2l.099 -.185l8.11 -13.538a2.914 2.914 0 0 1 2.491 -1.403zm.01 13.33l-.127 .007a1 1 0 0 0 0 1.986l.117 .007l.127 -.007a1 1 0 0 0 0 -1.986l-.117 -.007zm-.01 -7a1 1 0 0 0 -.993 .883l-.007 .117v4l.007 .117a1 1 0 0 0 1.986 0l.007 -.117v-4l-.007 -.117a1 1 0 0 0 -.993 -.883z"/></svg>
            Change this only if the new url points to the exact same server instance.
        </p>
    </div>
    <hr class="my-4"/>
    <h1 class="text-2xl font-bold mb-4">Customization</h1>
    <p>Set bookheaven as your screensaver to show the cover of the book you are reading (or a generic wallpaper otherwise) when the device goes to sleep depending on your device.</p>
    <Button Class="w-full my-2" Kind="Button.ButtonType.Secondary" OnClick="OpenScreensaverSettings">Open Screensaver settings</Button>
    <div class="my-3 flex flex-col gap-3">
        <CheckBox Label="Enable standby wallpaper workaround" @bind-Checked="AppStateService.EnableStandbyCoverWorkaround"/>
        <p class="px-3 text-sm">
            If your device doesn't allow you to change your screensaver, or it doesn't work for some reason, you can try enabling this option to simulate it.<br/>It works by showing a custom screen when the app goes to the background, so it won't be visible unless your device allows you to set a transparent standby wallpaper and it won't show anything when outside this app.
        </p>
    </div>
</main>

@code{
    [Inject] AppStateService AppStateService { get; set; } = null!;
    
    private void OpenScreensaverSettings()
    {
#if ANDROID
        var intent = new Android.Content.Intent(Android.Provider.Settings.ActionDreamSettings);
        intent.AddFlags(Android.Content.ActivityFlags.NewTask);
        Android.App.Application.Context.StartActivity(intent);
#endif
    }
}