@attribute [Route(Urls.Apps)]
@using AppInfo = BookHeaven.Reader.Entities.AppInfo
@implements IDisposable

<SectionContent SectionName="Header">
    @*<RadioButtonGroup Class="m-3" @bind-SelectedOption="_sortBy">
        <RadioButton Option="SortBy.Added" />
        <RadioButton Option="SortBy.Name"/>
    </RadioButtonGroup>*@
    <div class="flex items-center justify-between">
        <h1 class="text-xl font-bold mx-4 my-3">@Translations.APPS</h1>
        <Button Class="h-full" OnClick="RefreshAppsAsync">
            <svg  xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="2"  stroke-linecap="round"  stroke-linejoin="round"  class="icon icon-tabler icons-tabler-outline icon-tabler-reload"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M19.933 13.041a8 8 0 1 1 -9.925 -8.788c3.899 -1 7.935 1.007 9.425 4.747" /><path d="M20 4v5h-5" /></svg>
        </Button>
    </div>
    <hr/>
</SectionContent>

@if (AppsService.Apps.Count > 0)
{
    <ContextMenu Id="AppMenu" Context="appContext" OverrideDefaultCssClass="absolute rounded border bg-white">
        @{
            var app = (AppInfo)appContext.Data;
        }
        <Item OverrideDefaultCssClass="p-2">@app.Name</Item>
        @if (app.Shortcuts.Count > 0)
        {
            foreach(var shortcut in app.Shortcuts)
            {
                <Item OnClick="@(() => AppsService.OpenAppShortcut(app.PackageName!, shortcut.Id!))">
                    @if (shortcut.IconBase64 is not null)
                    {
                        <img src="data:image/png;base64,@shortcut.IconBase64" class="me-2 w-6 h-6 inline-block" alt="Shortcut icon" draggable="false"/>
                    }
                    @shortcut.ShortLabel
                </Item>
            }
        }
        <Item OnClick="@(() => AppsService.OpenApp(app.PackageName!))">
            <svg  xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="1"  stroke-linecap="round"  stroke-linejoin="round"  class="me-5 icon icon-tabler icons-tabler-outline icon-tabler-external-link"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M12 6h-6a2 2 0 0 0 -2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-6" /><path d="M11 13l9 -9" /><path d="M15 4h5v5" /></svg>
            @Translations.OPEN
        </Item>
        <Item OnClick="@(() => AppsService.OpenInfo(app.PackageName!))">
            <svg  xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="1"  stroke-linecap="round"  stroke-linejoin="round"  class="me-5 icon icon-tabler icons-tabler-outline icon-tabler-info-circle"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M3 12a9 9 0 1 0 18 0a9 9 0 0 0 -18 0" /><path d="M12 9h.01" /><path d="M11 12h1v4h1" /></svg>
            @Translations.INFO
        </Item>
        @if (AppsService.CanBeUninstalled(app.PackageName!))
        {
            <Item OnClick="@(() => AppsService.UninstallApp(app.PackageName!))">
                <svg  xmlns="http://www.w3.org/2000/svg"  width="24"  height="24"  viewBox="0 0 24 24"  fill="none"  stroke="currentColor"  stroke-width="1"  stroke-linecap="round"  stroke-linejoin="round"  class="me-5 icon icon-tabler icons-tabler-outline icon-tabler-trash-x"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M4 7h16" /><path d="M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2 -2l1 -12" /><path d="M9 7v-3a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1v3" /><path d="M10 12l4 4m0 -4l-4 4" /></svg>
                @Translations.UNINSTALL
            </Item>
        }
    </ContextMenu>

    <div class="grid grid-cols-6 auto-rows-fr gap-x-4 gap-y-6 p-4 justify-center">
        @foreach (var app in FilteredApps)
        {
            <ContextMenuTrigger CssClass="max-w-full" MenuId="AppMenu" Data="@app">
                <div class="grid gap-0.5 w-full overflow-hidden rounded active:bg-neutral-200 active:outline-4 active:outline-neutral-200" @onclick="@(() => AppsService.OpenApp(app.PackageName!))">
                    <img src="data:image/png;base64,@app.IconBase64" class="mx-auto w-16 px-2" alt="App icon" draggable="false"/>
                    <label class="text-xs text-nowrap select-none overflow-hidden overflow-ellipsis text-center mt-2">@app.Name</label>
                </div>
            </ContextMenuTrigger>
        }
    </div>
}

@code {
    [Inject] private IAppsService AppsService { get; set; } = null!;
    
    private List<AppInfo> FilteredApps =>
        _sortBy switch
        {
            SortBy.Added => AppsService.Apps.OrderBy(x => x.Date).ToList(),
            SortBy.Name => AppsService.Apps.OrderBy(x => x.Name).ToList(),
            _ => AppsService.Apps
        };
    
    private enum SortBy
    {
        Added,
        Name
    }

    private SortBy _sortBy = SortBy.Name;

    protected override void OnInitialized()
    {
        AppsService.OnAppsChanged += StateHasChanged;
    }
    
    public void Dispose()
    {
        AppsService.OnAppsChanged -= StateHasChanged;
        GC.SuppressFinalize(this);
    }

    private async Task RefreshAppsAsync()
    {
        await AppsService.RefreshInstalledAppsAsync();
        StateHasChanged();
    }
}