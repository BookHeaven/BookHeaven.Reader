@using BookHeaven.Domain.Enums
@using BookHeaven.Domain.Services
@if (Book == null)
{
	return;
}
<div class="fixed inset-0 z-50 flex items-center justify-center bg-black/50">
	<div class="flex flex-col border-2 h-[95%] w-[90%] overflow-hidden border-neutral-700 bg-white p-5">
		<div class="mb-2 flex items-center">
			<p class="text-xl font-bold">@Book.Title</p>
			<button class="ms-auto" @onclick="async () => await BookChanged.InvokeAsync(null)">
				<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1" stroke-linecap="round" stroke-linejoin="round" class="size-8 icon icon-tabler icons-tabler-outline icon-tabler-x"><path stroke="none" d="M0 0h24v24H0z" fill="none"/><path d="M18 6l-12 12"/><path d="M6 6l12 12"/></svg>
			</button>
		</div>
		<div class="flex gap-5 mb-2">
			<div class="grid gap-2 w-[150px]">
				<img src="@Book.GetCoverAsBase64()" class="block w-full" alt=""/>
				<span class="bg-neutral-600 px-2 py-1 text-center text-xs text-white">
					@switch (Book.ReadingStatus())
					{
						case BookStatus.New:
							<span>@Translations.NEW</span>
							break;
						case BookStatus.Reading:
							<span>@Translations.IN_PROGRESS</span>
							break;
						case BookStatus.Finished:
							<span>@Translations.FINISHED</span>
							break;
					}
				</span>
			</div>
			<div class="flex-1">
				<hr />
				<p class="my-1 font-bold">@Translations.DETAILS</p>
				<hr class="mb-2"/>
				@if (Book.Series != null)
				{
					<p>@Book.Series.Name</p>
				}
				<p>@Book.Author?.Name</p>
				@if (Book.ReadingStatus() != BookStatus.New)
				{
					<hr class="mt-4"/>
					<p class="my-1 font-bold">@Translations.STATS</p>
					<hr class="mb-2"/>
					<div class="grid grid-cols-2 gap-1">
						<span>@Translations.START_DATE</span>
						<span class="text-end">@Book.Progress().StartDate?.ToString("d")</span>
						@if (Book.ReadingStatus() == BookStatus.Reading)
						{
							<span>@Translations.LAST_READ</span>
							<span class="text-end">@Book.Progress().LastRead?.ToString("d")</span>
						}
						else
						{
							<span>@Translations.END_DATE</span>
							<span class="text-end">@Book.Progress().EndDate?.ToString("d")</span>
						}
						
					</div>
					<div class="flex items-center gap-2 my-2">
						<ProgressBar Value="@Book.Progress().Progress" />
						<span class="text-nowrap">@Book.Progress().Progress.ToString("0.##") %</span>
					</div>
					<p class="text-center">@Book.Progress().ElapsedTimeFormatted()</p>
				}
			</div>
		</div>
		@if (!string.IsNullOrEmpty(Book.Description))
		{
			<hr/>
			<div class="overflow-y-auto">
				<p class="mt-2 text-xs">@((MarkupString)Book.Description)</p>
			</div>
		}
	</div>
</div>

@code {
	[Inject] private BookManager BookManager { get; set; } = null!;

	[Parameter] public Book? Book { get; set; }
	[Parameter] public EventCallback<Book?> BookChanged { get; set; }
}