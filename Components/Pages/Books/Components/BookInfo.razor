@using BookHeaven.Domain.Enums
@using BookHeaven.Reader.Extensions
@using CommunityToolkit.Maui.Alerts
@if (Book == null)
{
	return;
}
<div class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
	<div class="border-2 h-[95%] w-[90%] overflow-hidden border-gray-700 bg-white p-5">
		<div class="mb-2 flex items-center gap-2">
			<Button Kind="Button.ButtonType.Secondary" Class="text-xs" OnClick="@(() => DeleteBook())">
				<i class="bi bi-trash"></i> Delete
			</Button>
			<Button Kind="Button.ButtonType.Secondary" Class="text-xs" OnClick="@(() => BookManager.ClearCache(Book))">
				<i class="bi bi-recycle"></i> Clear cache
			</Button>
			@if (Book.ReadingStatus() != BookStatus.New)
			{
				<Button Kind="Button.ButtonType.Secondary" Class="text-xs" OnClick="@ResetProgress">
					<i class="bi bi-radioactive"></i> Reset progress
				</Button>
			}

			<button class="ms-auto" @onclick="(() => BookChanged.InvokeAsync(null))">
				<i class="bi bi-x-lg text-2xl"></i>
			</button>
		</div>
		<div class="grid-cols-[150px_1fr] grid items-start gap-5">
			<div class="grid gap-2">
				<img src="@Book.GetCoverAsBase64(MauiProgram.CoversPath)" class="block w-full" alt=""/>
				<span class="bg-gray-600 px-2 py-1 text-center text-xs text-white">
					@switch (Book.ReadingStatus())
					{
						case BookStatus.New:
							<span>@Translations.NEW</span>
							break;
						case BookStatus.Reading:
							<span>@Translations.IN_PROGRESS</span>
							break;
						case BookStatus.Finished:
							<span>@Translations.FINISHED</span>
							break;
					}
				</span>
			</div>
			<div>
				<hr />
				<p class="my-1 font-bold">@Translations.DETAILS</p>
				<hr class="mb-2"/>
				<p class="text-xl">@Book.Title</p>
				@if (Book.Series != null)
				{
					<p>@Book.Series.Name</p>
				}
				<p>@Book.Author?.Name</p>
				@if (Book.ReadingStatus() != BookStatus.New)
				{
					<hr class="mt-4"/>
					<p class="my-1 font-bold">@Translations.STATS</p>
					<hr class="mb-2"/>
					<div class="grid-cols-2 grid gap-1">
						<span>@Translations.START_DATE</span>
						<span>@Book.Progress().StartDate?.ToString("d")</span>
						<span>@Translations.END_DATE</span>
						<span>@Book.Progress().EndDate?.ToString("d")</span>
						<span>@Translations.PROGRESS</span>
						<span>@Book.Progress().Progress.ToString("0.#")%</span>
						<span>@Translations.READ_TIME</span>
						<span>@Book.Progress().ElapsedTimeFormatted()</span>
					</div>
				}
			</div>
			@if (!string.IsNullOrEmpty(Book.Description))
			{

				<div class="col-span-2">
					<hr/>
					<p class="mt-2 text-xs">@((MarkupString)Book.Description)</p>
				</div>
			}

		</div>
	</div>
</div>

@code {
	[Inject] private BookManager BookManager { get; set; } = null!;
	[Inject] private IDatabaseService DatabaseService { get; set; } = null!;
	[Inject] private AlertService Alert { get; set; } = null!;

	[Parameter] public Book? Book { get; set; }
	[Parameter] public EventCallback<Book?> BookChanged { get; set; }

	private async Task DeleteBook()
	{
		var result = await Alert.ShowConfirmationAsync("Delete book", $"Are you sure you want to delete this book?{Environment.NewLine}{Environment.NewLine}This will remove the book from your device along with any progress you have.{Environment.NewLine}Whatever you have on your server will remain intact.");
		if (result)
		{
			await BookManager.DeleteBook(Book!);
			Book = null;
			await BookChanged.InvokeAsync(Book);
		}
	}

	private async Task ResetProgress()
	{
		var result = await Alert.ShowConfirmationAsync("Reset Progress", $"Are you sure you want to clear the progress?{Environment.NewLine}{Environment.NewLine}This action cannot be undone, but it can be recovered from the server (as long as you have synced it already) if you just delete the book and download it again.");
		if (result)
		{
			await BookManager.ResetProgress(Book!);
			await BookChanged.InvokeAsync(Book);
		}
		
	}
}