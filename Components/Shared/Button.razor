<button @attributes="@AdditionalAttributes" 
        class="flex items-center justify-center gap-2 px-4 py-2 @(Kind == ButtonType.Secondary ? "bg-neutral-600 text-white active:bg-neutral-400 active:text-black rounded" : "active:bg-neutral-700 active:text-white") @(Class)" 
        @onclick="@(() => OnClick.InvokeAsync())" 
        @onmousedown="@(() => OnMouseDown.InvokeAsync())" 
        disabled="@Disabled">
    @ChildContent
</button>

@code {

    public enum ButtonType
    {
        Default,
        Secondary
    }
    
    [Parameter] public string? Id { get; set; }

    [Parameter] public ButtonType Kind { get; set; } = ButtonType.Default;

    [Parameter] public RenderFragment? ChildContent { get; set; }

    [Parameter] public EventCallback OnClick { get; set; }

    [Parameter] public EventCallback OnMouseDown { get; set; }

    [Parameter] public bool Disabled { get; set; }

    [Parameter] public string? Class { get; set; }

    private Dictionary<string, object?> AdditionalAttributes => new()
    {
        { "id", !string.IsNullOrEmpty(Id) ? Id : null }
    };

}