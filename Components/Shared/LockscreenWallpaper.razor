@implements IDisposable
@if (_screenLocked)
{
	<div class="fixed z-[9000] inset-0 flex flex-col items-center justify-center bg-white">
		@if(!string.IsNullOrEmpty(ImageSrc)) {
			<img decoding="async" class="w-full" src="@ImageSrc" alt=""/>
		}
		else {
			<img decoding="async" class="w-[200px] mx-auto" src="/logo.svg" alt=""/>
			<p class="absolute bottom-16 text-2xl text-center text-neutral-600">BookHeaven</p>
		}
	</div>
}

@code {
	[Inject] private LifeCycleService LifeCycleService { get; set; } = null!;
	
	[Parameter] public string? ImageSrc { get; set; }

	private bool _screenLocked;
	
	protected override void OnInitialized()
	{
		LifeCycleService.Paused += Show;
		LifeCycleService.Resumed += Hide;
	}

	private void Show()
	{
		#if WINDOWS
		return;
		#endif
		_screenLocked = true;
		InvokeAsync(StateHasChanged);
	}
	private void Hide()
	{
		_screenLocked = false;
		InvokeAsync(StateHasChanged);
	}

	public void Dispose()
	{
		LifeCycleService.Paused -= Show;
		LifeCycleService.Resumed -= Hide;
	}
}